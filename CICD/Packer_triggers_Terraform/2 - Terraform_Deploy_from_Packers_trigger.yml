# This is a basic workflow to help you get started with Actions

name: Terraform after Packer

# Controls when the workflow will run
on:
  repository_dispatch:
    types: [trigger_prod_tf_build]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  tfbuild:
    name: Terraform Build or Destroy machine Infrastructure
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux]

    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ./machine/tf

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      #print out the event payload
      - name: Print Event Payload
        run: echo "${{ github.event.client_payload.variable_name }}"

      - name: Check TF Version
        run: terraform --version

      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESSKEY_SEC }}
        run: terraform init -no-color -backend-config="bucket=flexio-dso" -backend-config="key=tfstates/statefile.tfstate" -backend-config="region=us-east-1" -backend-config="encrypt=true" -backend-config="region=us-east-1"
 
      - name: Terraform validation
        run: terraform validate
      
      - name: Terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESSKEY_SEC }}
        run: terraform plan -no-color -var-file=prod.tfvars -var="GH_TOKEN=${{ secrets.GH_RUNNER_TK }}" -var="AMIPK=${{ github.event.client_payload.variable_name }}" -out tf.plan
      
      - name: Terraform apply
        if: ${{ vars.TF == 'build' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESSKEY_SEC }}
        run: terraform apply -no-color -auto-approve tf.plan

      - name: Terraform Plan Destroy
        if: ${{ vars.TF == 'destroy' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESSKEY_SEC }}
        run: terraform plan -destroy -var-file=prod.tfvars -var="GH_TOKEN=${{ secrets.GH_RUNNER_TK }}" -var="AMIPK=${{ github.event.client_payload.variable_name }}" -out=tfdestroy.tfplan
        
      - name: Terraform Destroy 
        if: ${{ vars.TF == 'destroy' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESSKEY_SEC }}
        run: terraform apply "tfdestroy.tfplan"